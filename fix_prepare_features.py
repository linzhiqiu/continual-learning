# python fix_prepare_features.py --folder_path /data3/zhiqiul/clear_datasets/CLEAR10-TEST --name moco_imagenet
# python fix_prepare_features.py --folder_path /data3/zhiqiul/clear_datasets/CLEAR10-TEST --name moco_b0
# python fix_prepare_features.py --folder_path /data3/zhiqiul/clear_datasets/CLEAR10-TEST --name imagenet
# python fix_prepare_features.py --folder_path /data3/zhiqiul/clear_datasets/CLEAR10-TEST --name byol_imagenet

# python fix_prepare_features.py --folder_path /data3/zhiqiul/clear_datasets/CLEAR100-V0 --name moco_imagenet
# python fix_prepare_features.py --folder_path /data3/zhiqiul/clear_datasets/CLEAR100-V0 --name moco_b0
# python fix_prepare_features.py --folder_path /data3/zhiqiul/clear_datasets/CLEAR100-V0 --name imagenet
# python fix_prepare_features.py --folder_path /data3/zhiqiul/clear_datasets/CLEAR100-V0 --name byol_imagenet

# python fix_prepare_features.py --folder_path /data3/zhiqiul/clear_datasets/CLEAR50-V2 --name moco_imagenet
# python fix_prepare_features.py --folder_path /data3/zhiqiul/clear_datasets/CLEAR50-V2 --name moco_b0
# python fix_prepare_features.py --folder_path /data3/zhiqiul/clear_datasets/CLEAR50-V2 --name imagenet
# python fix_prepare_features.py --folder_path /data3/zhiqiul/clear_datasets/CLEAR50-V2 --name byol_imagenet

# python fix_prepare_features.py --folder_path /data3/zhiqiul/CLEAR-10-PUBLIC --name moco_imagenet
# python fix_prepare_features.py --folder_path /data3/zhiqiul/CLEAR-10-PUBLIC --name moco_b0
# python fix_prepare_features.py --folder_path /data3/zhiqiul/CLEAR-10-PUBLIC --name imagenet
# python fix_prepare_features.py --folder_path /data3/zhiqiul/CLEAR-10-PUBLIC --name byol_imagenet


from utils import load_json, save_as_json
import argparse
from tqdm import tqdm
import torch
import os
from pathlib import Path
import torchvision.transforms as transforms
import torchvision.models as models
from torchvision.datasets.folder import default_loader
import shutil

device = "cuda" if torch.cuda.is_available() else "cpu"

argparser = argparse.ArgumentParser()
argparser.add_argument("--folder_path",
                       default='/data3/zhiqiul/clear_datasets/CLEAR10-TEST',
                       help="The folder generated by prepare_concepts.py (containing labeled_metadata.json, etc.)")
argparser.add_argument("--name",
                       default='default', type=str,
                       help="Please name this model. Features will be saved under {args.folder_path}/features/{args.name}")


if __name__ == '__main__':
    args = argparser.parse_args()

    folder_path = Path(args.folder_path)
    assert folder_path.exists(), f"{folder_path} does not exist"

    class_names_path = folder_path / 'class_names.txt'
    class_names_str = class_names_path.read_text()
    sorted_prompts = class_names_str.split("\n")

    labeled_images_path = folder_path / 'labeled_images'
    assert labeled_images_path.exists()

    labeled_metadata_json_path = folder_path / 'labeled_metadata.json'
    labeled_metadata = load_json(labeled_metadata_json_path)
    bucket_indices = sorted(list(labeled_metadata.keys()), key = lambda x : int(x))

    features_path = folder_path / 'features'
    features_name_path = features_path / args.name
    assert features_name_path.exists()
    features_dict_path = features_name_path / 'features.json'
    features_dict = {} # features_dict[bucket_index] = path to features dictionary
    
    for b_idx in bucket_indices:
        print(f"Working on {b_idx}")
        features_path_i = features_name_path / b_idx
        assert features_path_i.exists()
        features_dict[b_idx] = {} # key is label, value is dict
        
        for label in labeled_metadata[b_idx]:
            features_path_i_label = features_path_i / (label + ".pth")
            features_dict[b_idx][label] = str(Path('features') / Path(args.name) / b_idx / (label + ".pth"))
    save_as_json(features_dict_path, features_dict)
    print(f"Feature information saved to {features_dict_path}")
    